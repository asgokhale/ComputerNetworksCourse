// Author: Aniruddha Gokhale, Vanderbilt University
// Created: Sept 2023
//

Purpose of this sample code is to show how to use Protocol Buffers for serialization.
Essentially, using ProtoBufs, we can convert arbitrarily complex data types between
native and serialized formats. 

To demonstrate the client-server code, we also have code that uses gRPC

-----------------------------
Package installation
-----------------------------

Note: You should have installed the Protocol Buffers compiler and associated tools.

The easiest way to do this for Python is via these two commands:

(Use sudo before these if installing in system wide directory else use your virtualenv;
I installed in my system wide directory)

python3 -m pip install --upgrade grpcio
python3 -m pip install --upgrade grpcio-tools

--------------------------------
Files in this directory:
--------------------------------

schema.proto
        defines the schema for the user-defined type that we want to serialize in
        Protocol Buffers syntax

protobufdemo_grpc_server.py
        Implements the Service defined in the schema and shows how the gRPC
        server is coded
        
protobufdemo_grpc_client.py
        Implements the client side and shows how the gRPC client is coded
        
*_pb2_*.py*
        These are files that are generated by the Protocol Buffer compiler.

----------------------------------------------------
Invoking the Compiler on our Schema
----------------------------------------------------

Before we can attempt any serialization, we will need to convert our schema to the
code that our programming language can understand. To that end we use the
"protoc" compiler from ProtoBufs.

Note that for this demo, I have already generated the code from the Protocol
Buffers compiler. The generated files have the *_pb2* pattern in them.

For now, the sample code already has the schema transformed to Python code for us.
So you don't need to do this.

The command we have used is:

      python3 -m grpc_tools.protoc --proto_path=./ --python_out=./ --grpc_python_out=./ --pyi_out=./   schema.proto

Note that I did not invoke the "protoc" command directly as I was not able to figure out how
to get the gRPC service stub generation to work, i.e., which plugin and plugin path to provide
to the protoc compiler. Hence, invoking protoc as a module via python3 was a better way
to accomplish this task.

-------------------------
Generated Code
-------------------------

schema_pb2.py              is the generated code for all the message declarations
schema_pb2_grpc.py     is the generated code for the service declarations
schema_pb2.pyi             is the generated code for the stubs

-------------------------
Running the Code
-------------------------

Note that currently client and server must run on the same machine as the listening
and connecting address is hardcoded to localhost but that can easily be changed.

The rest of the code is run in the following manner:
(1) Open two shells in your Ubuntu VM
(2) Invoke "python3 protobufdemo_grpc_server.py in one shell
(3) Invoke "python3 protobufdemo_grpc_client.py" in the other shell

Observe the outputs

