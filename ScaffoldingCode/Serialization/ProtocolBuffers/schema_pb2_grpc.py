# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import schema_pb2 as schema__pb2


class DummyServiceStub(object):
    """Note that in your assignment, since you will have at least two separate types of 
    There is no "top level" root structure as in FlatBufs. We decide what is top for us

    Protocol Buffers also allow the facility to define services so as to support
    remote procedure calls. This did not exist in FlatBufs, but we declare one
    here as gRPC is a remote procedure call approach where the service must
    provide an interface declaring what is accepted as a request and what goes
    back as a response for that request. A response can comprise empty field if
    nothing is expected as a response.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.method = channel.unary_unary(
                '/DummyService/method',
                request_serializer=schema__pb2.Request.SerializeToString,
                response_deserializer=schema__pb2.Response.FromString,
                )


class DummyServiceServicer(object):
    """Note that in your assignment, since you will have at least two separate types of 
    There is no "top level" root structure as in FlatBufs. We decide what is top for us

    Protocol Buffers also allow the facility to define services so as to support
    remote procedure calls. This did not exist in FlatBufs, but we declare one
    here as gRPC is a remote procedure call approach where the service must
    provide an interface declaring what is accepted as a request and what goes
    back as a response for that request. A response can comprise empty field if
    nothing is expected as a response.

    """

    def method(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DummyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'method': grpc.unary_unary_rpc_method_handler(
                    servicer.method,
                    request_deserializer=schema__pb2.Request.FromString,
                    response_serializer=schema__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DummyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DummyService(object):
    """Note that in your assignment, since you will have at least two separate types of 
    There is no "top level" root structure as in FlatBufs. We decide what is top for us

    Protocol Buffers also allow the facility to define services so as to support
    remote procedure calls. This did not exist in FlatBufs, but we declare one
    here as gRPC is a remote procedure call approach where the service must
    provide an interface declaring what is accepted as a request and what goes
    back as a response for that request. A response can comprise empty field if
    nothing is expected as a response.

    """

    @staticmethod
    def method(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DummyService/method',
            schema__pb2.Request.SerializeToString,
            schema__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
